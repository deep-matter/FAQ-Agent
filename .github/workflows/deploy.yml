name: FAQ Agentic Flow - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run basic health check
        env:
          DB_HOST: localhost
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: test_db
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENVIRONMENT: testing
        run: |
          python -c "
          import sys
          sys.path.append('.')
          from app.database.connection import db_connection
          from app.config.settings import settings
          print('Testing database connection...')
          assert db_connection.test_connection(), 'Database connection failed'
          print('✓ Database connection successful')
          
          print('Testing imports...')
          from app.agents.grader import GraderAgent
          from app.agents.faq_agent import FAQAgent
          from app.agents.scrapper import ScrapperAgent
          from app.core.pipeline import FAQPipeline
          from app.core.session_manager import SessionManager
          from app.workflow.orchestrator import FAQWorkflowOrchestrator
          print('✓ All imports successful')
          
          print('Testing agent initialization...')
          grader = GraderAgent()
          pipeline = FAQPipeline()
          session_manager = SessionManager()
          print('✓ Agent initialization successful')
          "

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging (Docker Compose)
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "In a real deployment, this would:"
          echo "1. SSH to staging server"
          echo "2. Pull latest docker-compose.yml"
          echo "3. Update image tag in environment"
          echo "4. Run docker-compose up -d"
          echo "5. Run health checks"
      
      - name: Run smoke tests
        run: |
          echo "Running staging smoke tests..."
          echo "curl -f http://staging-server:8000/health"
          echo "curl -f http://staging-server:8000/api/v1/status"

  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production (Docker Compose)
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "In a real deployment, this would:"
          echo "1. SSH to production server"
          echo "2. Pull latest docker-compose.yml"
          echo "3. Update image tag in environment"
          echo "4. Run docker-compose up -d"
          echo "5. Run health checks"
          echo "6. Verify FAQ functionality"
      
      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          echo "curl -f http://production-server:8000/health"
          echo "curl -f http://production-server:8000/api/v1/status"
          echo "Test FAQ query endpoint"

  cleanup:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: 'true'